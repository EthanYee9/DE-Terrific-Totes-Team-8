name: de-terrific-totes
on:
  pull_request:
    branches:
      - main
jobs:
  container-job:
  # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:20-bookworm-slim

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          LOCALPASSWORD: ${{ secrets.LOCALPASSWORD}}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
  
  setup-aws-credentials:
    name: setup-aws-credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
  run-tests:
    name: run-tests
    needs: setup-aws-credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.12'
      - name: requirements
        run: make requirements

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: github_db.sql
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          LOCALUSER: ${{ secrets.LOCALUSER}}
          LOCALDB: ${{ secrets.LOCALDB}}

      - name: Run checks
        run: make run-checks
        env: 
            DBUSER: ${{ secrets.DBUSER}}
            DBPASSWORD: ${{ secrets.DBPASSWORD}}
            DBNAME: ${{ secrets.DBNAME}}
            HOST: ${{ secrets.HOST}}
            PORT: ${{ secrets.PORT}}
            BACKEND_S3: ${{ secrets.BACKEND_S3}}
            INGESTION_S3: ${{ secrets.INGESTION_S3}}
            PROCESSED_S3: ${{ secrets.PROCESSED_S3}}
            HOST_WH: ${{ secrets.HOST_WH}}
            DBNAME_WH: ${{ secrets.DBNAME_WH}}
            
# commit      
    
     
          
        



